[
 {
  "file": "/Users/Tibbers/Google Drive/2016Spring/RealTimeSystems/project/test/Socket-Implement/socket/socket/ysocket/TCPClient.swift",
  "offset": 448,
  "remove": 2357,
  "text": "buff: &buff, len: Int32(expectlen))\n            if readLen <= 0 {\n                return nil\n            }\n            var rs = buff[0...Int(readLen-1)]\n            var data: [UInt8] = Array(rs)\n            return data\n        }\n        return nil\n    }\n    \n    var delegate: TCPClientDelegate?\n    \n    func connectServer(timeout t:Int) {\n        \n        var rs:Int32 = c_ytcpsocket_connect(self.addr, port: Int32(self.port),timeout: Int32(t))\n        \n        var state: ClientState\n        if rs > 0 {\n            self.fd = rs\n            state = ClientState.Connected\n            \n            dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0)) { [weak self] in\n                while self != nil {\n                    //读取数据\n                    if let d = self!.read(1024*10) {\n                        let data = NSData(bytes: d, length: d.count)\n                        self?.delegate?.client(self!, receivedData: data)\n                    }\n                }\n            }\n            \n        } else {\n            switch rs {\n            case -1:\n                state = ClientState.Failed\n            case -2:\n                state = ClientState.Closed\n            case -3:\n                state = ClientState.TimeOut\n            default:\n                state = ClientState.Unknowed\n            }\n        }\n        \n        self.delegate?.client(self, connectSververState: state)\n        \n    }\n    \n    func send(data d:[UInt8]) -> Bool {\n        var flag: Bool = false\n        \n        if let fd:Int32 = self.fd {\n            var sendsize:Int32 = c_ytcpsocket_send(fd, buff: d, len: Int32(d.count))\n            if Int(sendsize) == d.count {\n                flag = true\n            }\n        }\n        return flag\n    }\n    \n    func send(str s:String) -> Bool {\n        var flag: Bool = false\n        \n        if let fd:Int32 = self.fd {\n            var sendsize:Int32 = c_ytcpsocket_send(fd, buff: s, len: Int32(strlen(s)))\n            if sendsize == Int32(strlen(s)) {\n                flag = true\n            }\n        }\n        \n        return flag\n    }\n\n    func send(data d:NSData) -> Bool {\n        var flag: Bool = false\n        \n        if let fd:Int32 = self.fd {\n            var buff:[UInt8] = [UInt8](count:d.length,repeatedValue:0x0)\n            d.getBytes(&buff, length: d.length)\n            var sendsize:Int32 = c_ytcpsocket_send(fd, buff: buff, len:",
 }
]
